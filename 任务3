# 下载并准备NeRF实现框架
!git clone https://github.com/bmild/nerf.git
%cd nerf

import shutil
import os

# 设定数据集路径和目标路径
camera_params_path = 'model1.ini'
images_path = 'bottle'
target_path = 'your_dataset'

# 创建目标路径
os.makedirs(target_path, exist_ok=True)

# 拷贝相机参数文件
shutil.copy(camera_params_path, os.path.join(target_path, 'camera_params.ini'))

# 拷贝图片文件
for file_name in os.listdir(images_path):
    full_file_name = os.path.join(images_path, file_name)
    if os.path.isfile(full_file_name):
        shutil.copy(full_file_name, target_path)

# 修改配置文件和训练脚本
config_content = """
data_dir = ./data/nerf_synthetic/your_dataset
...
"""
with open('your_config.txt', 'w') as config_file:
    config_file.write(config_content)

# 训练NeRF模型
!python run_nerf.py --config ./configs/your_config.txt

# 使用TensorBoard进行训练过程的可视化
from tensorboard import notebook
notebook.start("--logdir logs")

# 渲染新视图
!python run_nerf.py --config ./configs/your_config.txt --render_only

# 定量评估，计算PSNR
import torch
import numpy as np
from skimage.metrics import peak_signal_noise_ratio as psnr
from torchvision import transforms
from PIL import Image

def load_image(image_path):
    image = Image.open(image_path)
    transform = transforms.ToTensor()
    return transform(image).unsqueeze(0)

def compute_psnr(image1, image2):
    image1 = image1.squeeze(0).permute(1, 2, 0).numpy()
    image2 = image2.squeeze(0).permute(1, 2, 0).numpy()
    return psnr(image1, image2)

test_image_path = 'path/to/test_image.png'
rendered_image_path = 'path/to/rendered_image.png'

test_image = load_image(test_image_path)
rendered_image = load_image(rendered_image_path)

# 计算PSNR
psnr_value = compute_psnr(test_image, rendered_image)
print(f"PSNR: {psnr_value}")
